import { Component, OnInit } from '@angular/core';
import { MatSlideToggleChange } from '@angular/material/slide-toggle';
import { IEvaluacion } from 'sharedInterfaces/Entity';
import { EvaluacionesAdmService } from '../services/evaluaciones-adm.service';

@Component({
	selector: 'app-list-ev',
	templateUrl: './list-ev.component.html',
	styleUrls: ['./list-ev.component.scss'],
})
export class ListEvComponent implements OnInit {
	/** Controls if ModalForm can be rendered */
	public loadMForm = false;

	/** Evs in database */
	evaluaciones: IEvaluacion[] = [];

	// TODO: tsdoc
	showingResultsBtnControls = {
		textToAdd: 'slideResults-',
		/**
		 * @param evId The identifier of the evaluation
		 * @returns The btn identifier that can be decoded to get the evId
		 */
		encodeBtnId: (evId: IEvaluacion['id']): string => {
			return `${this.showingResultsBtnControls.textToAdd}${evId}`;
		},

		/**
		 * @param btnId The btnId to be decoded
		 * @returns The evId decoded from the btnId
		 */
		decodeBtnId: (btnId: string): IEvaluacion['id'] => {
			return Number.parseInt(btnId.slice(this.showingResultsBtnControls.textToAdd.length, btnId.length));
		},
	};

	constructor(private evSv: EvaluacionesAdmService) {}

	ngOnInit() {
		this.updateEvalView();
	}

	async updateEvalView(): Promise<void> {
		//LOG: `se actualiza una evaluacion`
		this.evaluaciones = await this.evSv.getAll();
	}

	/**
	 * Gets all the created evaluations
	 */
	async newEvSaved(updateEvalView: ListEvComponent['updateEvalView']) {
		//LOG: `se guarda una evaluacion ${updateEvalView}`
		await updateEvalView();
	}

	/**
	 * Method that updates ev.isShowingResults posting to the backend when slideToggleBtn value changes
	 * @param event Event generated by MatSlideToggle Component
	 */
	async showingResultsBtnUpdate(event: MatSlideToggleChange): Promise<void> {
		const evIdDecoded = this.showingResultsBtnControls.decodeBtnId(event.source.id);
		let evToModify = this.evaluaciones.find(ev => ev.id === evIdDecoded);
		if (!evToModify) {
			throw new Error('This should never happen, contact a programmer, probably decodeBtnId fn failed');
		}
		this.evSv.updateShowingResults({ id: evToModify.id, isShowingResults: event.checked });
	}
}
